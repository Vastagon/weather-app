{"ast":null,"code":"var _jsxFileName = \"/home/jacob/Code/weather-app/src/components/LocationDropdown.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState, useRef } from \"react\";\nimport LocationDropdownElement from \"./LocationDropdownElement\";\nimport onClickOutside from \"react-onclickoutside\";\nimport listenForOutsideClick from \"./listenForOutsideClick\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function LocationDropdown(props) {\n  _s();\n\n  let allDropdownElements;\n  const [listening, setListening] = useState(false);\n  const [isOpen, setIsOpen] = useState(false);\n\n  const toggle = () => setIsOpen(!isOpen);\n\n  const menuRef = useRef(null);\n  useEffect(listenForOutsideClick(listening, setListening, menuRef, setIsOpen)); ///if(props.dropdownBoolean){\n\n  allDropdownElements = props.listOfLoc.map(locationData => {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      onClick: onDropdownClick,\n      className: \"location-dropdown-element\",\n      children: [locationData.name, \", \", locationData.region]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 17\n    }, this);\n  }); ///}\n  // onClickOutside = evt =>{\n  //     document.getElementsByClassName(\"location-dropdown\").style.display = \"none\"\n  // }\n\n  function onDropdownClick() {}\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: menuRef,\n    className: isOpen ? \"location-dropdown\" : \"none\",\n    children: allDropdownElements\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n}\n\n_s(LocationDropdown, \"7VXMJ8Sp62NPX1TGO3ZeZWM1YcA=\");\n\n_c = LocationDropdown;\n\nvar _c;\n\n$RefreshReg$(_c, \"LocationDropdown\");","map":{"version":3,"sources":["/home/jacob/Code/weather-app/src/components/LocationDropdown.js"],"names":["useEffect","useState","useRef","LocationDropdownElement","onClickOutside","listenForOutsideClick","LocationDropdown","props","allDropdownElements","listening","setListening","isOpen","setIsOpen","toggle","menuRef","listOfLoc","map","locationData","onDropdownClick","name","region"],"mappings":";;;AAAA,SAAQA,SAAR,EAAmBC,QAAnB,EAA6BC,MAA7B,QAA0C,OAA1C;AACA,OAAOC,uBAAP,MAAoC,2BAApC;AACA,OAAOC,cAAP,MAA2B,sBAA3B;AACA,OAAOC,qBAAP,MAAkC,yBAAlC;;AAEA,eAAe,SAASC,gBAAT,CAA0BC,KAA1B,EAAgC;AAAA;;AAC3C,MAAIC,mBAAJ;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACU,MAAD,EAASC,SAAT,IAAsBX,QAAQ,CAAC,KAAD,CAApC;;AACA,QAAMY,MAAM,GAAG,MAAMD,SAAS,CAAC,CAACD,MAAF,CAA9B;;AACA,QAAMG,OAAO,GAAGZ,MAAM,CAAC,IAAD,CAAtB;AAEAF,EAAAA,SAAS,CAACK,qBAAqB,CAACI,SAAD,EAAYC,YAAZ,EAA0BI,OAA1B,EAAmCF,SAAnC,CAAtB,CAAT,CAP2C,CAS3C;;AACIJ,EAAAA,mBAAmB,GAAGD,KAAK,CAACQ,SAAN,CAAgBC,GAAhB,CAAoBC,YAAY,IAAG;AACrD,wBACI;AAAG,MAAA,OAAO,EAAEC,eAAZ;AAA6B,MAAA,SAAS,EAAC,2BAAvC;AAAA,iBAAoED,YAAY,CAACE,IAAjF,QAAyFF,YAAY,CAACG,MAAtG;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAIH,GALqB,CAAtB,CAVuC,CAgB3C;AAEA;AACA;AACA;;AAEA,WAASF,eAAT,GAA0B,CAEzB;;AAED,sBACI;AAAK,IAAA,GAAG,EAAEJ,OAAV;AAAmB,IAAA,SAAS,EAAEH,MAAM,GAAG,mBAAH,GAAyB,MAA7D;AAAA,cACKH;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;GA/BuBF,gB;;KAAAA,gB","sourcesContent":["import {useEffect, useState, useRef} from \"react\"\nimport LocationDropdownElement from \"./LocationDropdownElement\"\nimport onClickOutside from \"react-onclickoutside\"\nimport listenForOutsideClick from \"./listenForOutsideClick\"\n\nexport default function LocationDropdown(props){\n    let allDropdownElements\n    const [listening, setListening] = useState(false)\n    const [isOpen, setIsOpen] = useState(false);\n    const toggle = () => setIsOpen(!isOpen)\n    const menuRef = useRef(null)\n\n    useEffect(listenForOutsideClick(listening, setListening, menuRef, setIsOpen));\n\n    ///if(props.dropdownBoolean){\n        allDropdownElements = props.listOfLoc.map(locationData =>{\n            return(\n                <p onClick={onDropdownClick} className=\"location-dropdown-element\">{locationData.name}, {locationData.region}</p>\n            )\n\n        })        \n    ///}\n\n    // onClickOutside = evt =>{\n    //     document.getElementsByClassName(\"location-dropdown\").style.display = \"none\"\n    // }\n\n    function onDropdownClick(){\n\n    }\n\n    return(\n        <div ref={menuRef} className={isOpen ? \"location-dropdown\" : \"none\"}>\n            {allDropdownElements}\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}